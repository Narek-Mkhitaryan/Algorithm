#include <stdio.h>
#include <stdlib.h>

//Represent a node of binary tree
struct node{
    int data;
    struct node *left;
    struct node *right;
};

//Represent the root of binary tree
struct node *root = NULL;

//createNode() will create a new node
struct node* createNode(int data){
    //Create a new node
    struct node *newNode = (struct node*)malloc(sizeof(struct node));
    //Assign data to newNode, set left and right children to NULL
    newNode->data = data;
    newNode->left = NULL;
    newNode->right = NULL;

    return newNode;
}

//queue will be used to keep track of nodes of tree level-wise
struct node* queue[100];
int rear = 0,front = -1, size = 0;

//Adds new node to the queue
void enqueue(struct node* temp)
{
    queue[rear++]=temp;
    size++;
}
//Deletes a node from the queue
struct node* dequeue()
{
    size--;
    return queue[++front];
}

//findMaximumWidth() will find out the maximum width of the given binary tree
int findMaximumWidth(int *maxLevel) {
    int maxWidth = 0;
    int level = 0; // Initialize the level number

    //Check if root is null, then width will be 0
    if(root == NULL) {
        printf("Tree is empty\n");
        return 0;
    }
    else {
        //Add root node to queue as it represents the first level
        enqueue(root);

        while(size != 0) {
            //Variable nodesInLevel will hold the size of queue i.e. number of elements in queue
            int nodesInLevel = size;

            //maxWidth will hold maximum width.
            //If nodesInLevel is greater than maxWidth then, maxWidth will hold the value of nodesInLevel
            if (maxWidth < nodesInLevel) {
                maxWidth = nodesInLevel;
                *maxLevel = level; // Update the maxLevel where maxWidth is found
            }

            // Print the number of nodes in the current level (width of the level)
            printf("Width of level %d: %d\n", level, nodesInLevel);

            //If variable nodesInLevel contains more than one node
            //then, for each node, we'll add left and right child of the node to the queue
            while(nodesInLevel > 0) {

                struct node *current = dequeue();
                if(current->left != NULL){
                    enqueue(current->left);
                }

                if(current->right != NULL) {
                    enqueue(current->right);
                }
                nodesInLevel--;
            }
            level++; // Increment the level number
        }
        return maxWidth;
    }
}

int main()
{
    int maxLevel;
    //Add nodes to the binary tree
    root = createNode(1);
    root->left = createNode(2);
    root->right = createNode(3);
    root->left->left = createNode(4);
    root->left->right = createNode(5);
    root->right->left = createNode(6);
    root->right->right = createNode(7);
    root->left->left->left = createNode(8);
/*





             1                  Level 0 has one node, so maxWidth = 1.                   
          /    \                
         2      3               Level 1 has two nodes, so maxWidth = 2 as (2 > 1).
       /  \   /  \
      4   5  6   7              Level 2 has four nodes, so maxWidth = 4 as (4 > 2). 
     /
    8                           Level 3 has one node, so maxWidth = 4 as (1 < 4).
*/

    //Display the maximum width of the given tree
    int maxWidth = findMaximumWidth(&maxLevel);
    printf("Maximum width of the binary tree at level %d: %d\n", maxLevel, maxWidth);
    return 0;
}
